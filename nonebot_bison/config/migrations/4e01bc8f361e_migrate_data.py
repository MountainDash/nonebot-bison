"""migrate data

修订 ID: 4e01bc8f361e
父修订: 0f2a5973c8ae
创建时间: 2023-10-12 19:49:27.835990

"""

from __future__ import annotations

from collections.abc import Sequence

from alembic import op
from nonebot import logger, require
import sqlalchemy as sa
from sqlalchemy import Connection, inspect
from sqlalchemy.ext.asyncio import AsyncConnection
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session

revision: str = "4e01bc8f361e"
down_revision: str | Sequence[str] | None = "0f2a5973c8ae"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def _migrate_old_data(ds_conn: Connection):
    insp = inspect(ds_conn)
    if "nonebot_bison_alembic_version" not in insp.get_table_names():
        logger.debug("bison: 未发现来自 datastore 的数据")
        return

    # 检查是否存在旧数据
    version_num = ds_conn.scalars(sa.text("SELECT version_num FROM nonebot_bison_alembic_version")).one_or_none()
    if version_num != "f9baef347cc8":
        logger.error(
            "bison: datastore 数据库中存在旧数据，但不是最新版本，无法迁移。\n"
            "请安装 0.8.2 版本后，运行 nb datastore upgrade 后再次尝试。"
        )
        raise RuntimeError("bison: datastore 数据库中存在旧数据，但不是最新版本，无法迁移。")

    DsBase = automap_base()
    DsBase.prepare(autoload_with=ds_conn)
    DsUser = DsBase.classes.nonebot_bison_user
    DsTarget = DsBase.classes.nonebot_bison_target
    DsSubscribe = DsBase.classes.nonebot_bison_subscribe
    DsScheduleTimeWeight = DsBase.classes.nonebot_bison_scheduletimeweight
    DsCookie = DsBase.classes.nonebot_bison_cookie
    DsCookieTarget = DsBase.classes.nonebot_bison_cookie_target

    Base = automap_base()
    Base.prepare(autoload_with=op.get_bind())
    User = Base.classes.nonebot_bison_user
    Target = Base.classes.nonebot_bison_target
    Subscribe = Base.classes.nonebot_bison_subscribe
    ScheduleTimeWeight = Base.classes.nonebot_bison_scheduletimeweight
    Cookie = Base.classes.nonebot_bison_cookie
    CookieTarget = Base.classes.nonebot_bison_cookie_target

    ds_sessioin = Session(ds_conn)
    session = Session(op.get_bind())

    # 写入数据
    logger.info("bison: 发现来自 datastore 的数据，正在迁移...")
    for ds_user in ds_sessioin.query(DsUser).all():
        user = User(
            id=ds_user.id,
            user_target=ds_user.user_target,
        )
        session.add(user)
    for ds_target in ds_sessioin.query(DsTarget).all():
        target = Target(
            id=ds_target.id,
            platform_name=ds_target.platform_name,
            target=ds_target.target,
            target_name=ds_target.target_name,
            default_schedule_weight=ds_target.default_schedule_weight,
        )
        session.add(target)
    for ds_subscribe in ds_sessioin.query(DsSubscribe).all():
        subscribe = Subscribe(
            id=ds_subscribe.id,
            target_id=ds_subscribe.target_id,
            user_id=ds_subscribe.user_id,
            categories=ds_subscribe.categories,
            tags=ds_subscribe.tags,
        )
        session.add(subscribe)
    for ds_schedule_time_weight in ds_sessioin.query(DsScheduleTimeWeight).all():
        schedule_time_weight = ScheduleTimeWeight(
            id=ds_schedule_time_weight.id,
            target_id=ds_schedule_time_weight.target_id,
            start_time=ds_schedule_time_weight.start_time,
            end_time=ds_schedule_time_weight.end_time,
            weight=ds_schedule_time_weight.weight,
        )
        session.add(schedule_time_weight)
    for ds_cookie in ds_sessioin.query(DsCookie).all():
        cookie = Cookie(
            id=ds_cookie.id,
            site_name=ds_cookie.site_name,
            content=ds_cookie.content,
            cookie_name=ds_cookie.cookie_name,
            last_usage=ds_cookie.last_usage,
            status=ds_cookie.status,
            cd_milliseconds=ds_cookie.cd_milliseconds,
            is_universal=ds_cookie.is_universal,
            is_anonymous=ds_cookie.is_anonymous,
            tags=ds_cookie.tags,
        )
        session.add(cookie)
    for ds_cookie_target in ds_sessioin.query(DsCookieTarget).all():
        cookie_target = CookieTarget(
            id=ds_cookie_target.id,
            target_id=ds_cookie_target.target_id,
            cookie_id=ds_cookie_target.cookie_id,
        )
        session.add(cookie_target)
    session.commit()
    logger.info("bison: 迁移完成")


async def data_migrate(conn: AsyncConnection):
    from nonebot_plugin_datastore.db import get_engine

    async with get_engine().connect() as ds_conn:
        await ds_conn.run_sync(_migrate_old_data)


def upgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        require("nonebot_plugin_datastore")
    except RuntimeError:
        return

    op.run_async(data_migrate)
    # ### end Alembic commands ###


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
